name: ovpn3-connector
description: 
  Setup vpn using a self-contained .ovpn file on both Windows and Linux
inputs:
  ovpn-config:
    description: Complete self-contained .ovpn file
    required: true
  vpn-user:
    description: Username for the VPN
    required: false
  vpn-pass:
    description: Password for the VPN
    required: false
runs:
  using: composite
  steps:
    # Steps for Linux runners
    - name: Write VPN Files (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ovpn-config }}" > .github/vpn.ovpn
        ls -al .github/vpn.ovpn
    - name: Install openvpn3 (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install openvpn
    - name: VPN Connect (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        { printf "${{ inputs.vpn-user }}\n${{ inputs.vpn-pass }}\n" ; } | sudo openvpn --config .github/vpn.ovpn --daemon

    # Steps for Windows runners
    - name: Write VPN Files (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        mkdir -Force $HOME\.ssh
        Set-Content -Path .github\vpn.ovpn -Value "${{ inputs.ovpn-config }}"
        Get-ChildItem -Path .github\vpn.ovpn
    - name: Install openvpn3 (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        choco install openvpn --no-progress
    - name: VPN Connect (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Get the name of the VPN interface (e.g., "TAP-Windows Adapter")
        $vpnInterface = (Get-NetAdapter | Where-Object { $_.InterfaceDescription -match "TAP-Windows|OpenVPN" }).InterfaceIndex
        if (-not $vpnInterface) {
            Write-Host "VPN interface not found. Ensure the VPN is connected."
            exit
        }

        # Get the gateway IP associated with the VPN interface from the route table
        $vpnGateway = (Get-NetRoute | Where-Object { $_.InterfaceIndex -eq $vpnInterface -and $_.DestinationPrefix -eq "0.0.0.0/0" }).NextHop

        if (-not $vpnGateway) {
            Write-Host "VPN Gateway IP not found. Please check your VPN connection."
            exit
        }
        echo $vpnGateway
        echo "${{ inputs.vpn-user }}" | Out-File -FilePath auth.txt -Encoding ascii
        echo "${{ inputs.vpn-pass }}" | Out-File -Append -FilePath auth.txt -Encoding ascii
        Start-Process "C:\Program Files\OpenVPN\bin\openvpn.exe" -ArgumentList '--config ".github\vpn.ovpn" --auth-user-pass "auth.txt" --allow-compression yes --route-nopull --route 10.10.0.0 $vpnGateway'
